#include <iostream>

using namespace std;

/*
* 1. 在类体内定义的函数都是内联函数，即使没有使用 inline 说明符,在类体外定义，系统并不是把它默认为内置函数,将这些成员函数指定为内置函数，则应该加inline关键字。
* 2. 如果想把一个函数定义为内联函数，则需要在函数名前面放置关键字 inline。
*    在调用函数之前需要对函数进行定义，如果已定义的函数代码量很多，编译器会忽略 inline 限定符。
*    只有当函数只有 10 行甚至更少时才将其定义为内联函数.（Google C++编码规范）
*    C++ 内联函数是通常与类一起使用
* 3. 如果一个函数是内联的，那么在编译时，编译器会把该函数的代码副本放置在每个调用该函数的地方。
     其它函数是在运行的时候跳转到调用函数地址，这其实就是个空间代价换时间的节省
* 4. 对内联函数进行任何修改，都需要重新编译函数的所有客户端，因为编译器需要重新更换一次所有的代码，否则将会继续使用旧的函数。
* 5. 在内联函数内不允许使用循环语句和开关语句；
* 6. 内联函数应该在头文件中定义，关键字 inline 必须与函数定义体放在一起才能使函数成为内联，仅将 inline 放在函数声明前面不起任何作用。
* 7. C++ inline函数是一种“用于实现的关键字”，而不是一种“用于声明的关键字”。
*
*/

//类内定义
class Node
{
public:
    void process()
    {

    }
};



//类体外定义
class Handle
{
public:
    void process();
};

inline void Handle::process()
{

}


//全局函数
inline int Add(int x,int y)
{
    return x+y;
}



int main()
{


    cout << "Hello World" << endl;
    return 0;
}